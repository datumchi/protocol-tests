// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identity_services.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

/// Device Info describes the "Device" role in the DatumChi protocol
/// TODO: Should DeviceInfo include notification preferences and requirements i.e. GCM, iOS, https push, MESSAGE?
type DeviceInfo struct {
	/// The public key of the device, using Ed25519 base 32 encoded
	DevicePublicKey string `protobuf:"bytes,1,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
	/// The signature of the sha256 hash of data dependent on call, signed using private key
	Signature            string   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6081a5661742e42, []int{0}
}

func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfo.Unmarshal(m, b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return xxx_messageInfo_DeviceInfo.Size(m)
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetDevicePublicKey() string {
	if m != nil {
		return m.DevicePublicKey
	}
	return ""
}

func (m *DeviceInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type EstablishIdentityAuthenticatedRequest struct {
	AuthToken            *AuthenticationToken `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	Identity             *Identity            `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EstablishIdentityAuthenticatedRequest) Reset()         { *m = EstablishIdentityAuthenticatedRequest{} }
func (m *EstablishIdentityAuthenticatedRequest) String() string { return proto.CompactTextString(m) }
func (*EstablishIdentityAuthenticatedRequest) ProtoMessage()    {}
func (*EstablishIdentityAuthenticatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6081a5661742e42, []int{1}
}

func (m *EstablishIdentityAuthenticatedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstablishIdentityAuthenticatedRequest.Unmarshal(m, b)
}
func (m *EstablishIdentityAuthenticatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstablishIdentityAuthenticatedRequest.Marshal(b, m, deterministic)
}
func (m *EstablishIdentityAuthenticatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstablishIdentityAuthenticatedRequest.Merge(m, src)
}
func (m *EstablishIdentityAuthenticatedRequest) XXX_Size() int {
	return xxx_messageInfo_EstablishIdentityAuthenticatedRequest.Size(m)
}
func (m *EstablishIdentityAuthenticatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstablishIdentityAuthenticatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstablishIdentityAuthenticatedRequest proto.InternalMessageInfo

func (m *EstablishIdentityAuthenticatedRequest) GetAuthToken() *AuthenticationToken {
	if m != nil {
		return m.AuthToken
	}
	return nil
}

func (m *EstablishIdentityAuthenticatedRequest) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

type AttestIdentityAttributeAuthenticatedRequest struct {
	AuthToken            *AuthenticationToken  `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	IdentityAddress      *Address              `protobuf:"bytes,2,opt,name=identityAddress,proto3" json:"identityAddress,omitempty"`
	IdentityAttestation  *Identity_Attestation `protobuf:"bytes,3,opt,name=identityAttestation,proto3" json:"identityAttestation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AttestIdentityAttributeAuthenticatedRequest) Reset() {
	*m = AttestIdentityAttributeAuthenticatedRequest{}
}
func (m *AttestIdentityAttributeAuthenticatedRequest) String() string {
	return proto.CompactTextString(m)
}
func (*AttestIdentityAttributeAuthenticatedRequest) ProtoMessage() {}
func (*AttestIdentityAttributeAuthenticatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6081a5661742e42, []int{2}
}

func (m *AttestIdentityAttributeAuthenticatedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest.Unmarshal(m, b)
}
func (m *AttestIdentityAttributeAuthenticatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest.Marshal(b, m, deterministic)
}
func (m *AttestIdentityAttributeAuthenticatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest.Merge(m, src)
}
func (m *AttestIdentityAttributeAuthenticatedRequest) XXX_Size() int {
	return xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest.Size(m)
}
func (m *AttestIdentityAttributeAuthenticatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestIdentityAttributeAuthenticatedRequest proto.InternalMessageInfo

func (m *AttestIdentityAttributeAuthenticatedRequest) GetAuthToken() *AuthenticationToken {
	if m != nil {
		return m.AuthToken
	}
	return nil
}

func (m *AttestIdentityAttributeAuthenticatedRequest) GetIdentityAddress() *Address {
	if m != nil {
		return m.IdentityAddress
	}
	return nil
}

func (m *AttestIdentityAttributeAuthenticatedRequest) GetIdentityAttestation() *Identity_Attestation {
	if m != nil {
		return m.IdentityAttestation
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceInfo)(nil), "datumchi.protocol.DeviceInfo")
	proto.RegisterType((*EstablishIdentityAuthenticatedRequest)(nil), "datumchi.protocol.EstablishIdentityAuthenticatedRequest")
	proto.RegisterType((*AttestIdentityAttributeAuthenticatedRequest)(nil), "datumchi.protocol.AttestIdentityAttributeAuthenticatedRequest")
}

func init() { proto.RegisterFile("identity_services.proto", fileDescriptor_d6081a5661742e42) }

var fileDescriptor_d6081a5661742e42 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x4d, 0x2a, 0x94, 0xe6, 0x06, 0xfa, 0x71, 0x7d, 0x68, 0x5c, 0x2d, 0xe8, 0x82, 0x1a, 0x10,
	0xf2, 0x10, 0x1f, 0xf4, 0x49, 0x48, 0x1b, 0xa9, 0x45, 0x04, 0x19, 0xf3, 0x52, 0x41, 0xc3, 0x66,
	0xe7, 0x36, 0x3b, 0xb8, 0x3b, 0x53, 0x67, 0xee, 0x06, 0xfa, 0xe2, 0xaf, 0xf0, 0x37, 0x88, 0x3f,
	0x53, 0x3a, 0xd9, 0x4d, 0x42, 0xb2, 0xc6, 0x7d, 0xb0, 0x6f, 0xb3, 0x33, 0xe7, 0x9c, 0x7b, 0xee,
	0xcc, 0xb9, 0x0b, 0xc7, 0x4a, 0x92, 0x66, 0xc5, 0x37, 0x63, 0x47, 0x76, 0xa6, 0x62, 0x72, 0xbd,
	0x6b, 0x6b, 0xd8, 0xe0, 0x91, 0x8c, 0x38, 0xcf, 0xe2, 0x44, 0xcd, 0xbf, 0x63, 0x93, 0x06, 0x0f,
	0x62, 0x93, 0x65, 0x46, 0x8f, 0xa5, 0xc9, 0x22, 0xa5, 0xc7, 0x99, 0x91, 0x94, 0xce, 0x4f, 0xc3,
	0x11, 0xc0, 0x90, 0x6e, 0xe9, 0x17, 0xfa, 0xca, 0x60, 0x17, 0x0e, 0xa4, 0xff, 0xfa, 0x98, 0x4f,
	0x52, 0x15, 0xbf, 0xa7, 0x9b, 0x4e, 0xf3, 0x71, 0xb3, 0xdb, 0x12, 0xeb, 0xdb, 0xf8, 0x08, 0x5a,
	0x4e, 0x4d, 0x75, 0xc4, 0xb9, 0xa5, 0xce, 0x8e, 0xc7, 0x2c, 0x37, 0xc2, 0x5f, 0x4d, 0x78, 0xfa,
	0xd6, 0x71, 0x34, 0x49, 0x95, 0x4b, 0x2e, 0x0a, 0xa3, 0x83, 0x9c, 0x93, 0xdb, 0x55, 0x1c, 0x31,
	0x49, 0x41, 0xdf, 0x73, 0x72, 0x8c, 0x43, 0x68, 0x45, 0x39, 0x27, 0x23, 0xf3, 0x8d, 0xb4, 0xaf,
	0xd5, 0xee, 0x3f, 0xeb, 0x6d, 0x74, 0xd0, 0x5b, 0xe1, 0x2a, 0xa3, 0x3d, 0x5a, 0x2c, 0x89, 0xf8,
	0x0a, 0xf6, 0xca, 0xeb, 0xf0, 0x66, 0xda, 0xfd, 0x87, 0x15, 0x22, 0xa5, 0x11, 0xb1, 0x00, 0x87,
	0x3f, 0x77, 0xe0, 0xc5, 0x80, 0x99, 0x1c, 0x2f, 0x5c, 0x32, 0x5b, 0x35, 0xc9, 0x99, 0xee, 0xd0,
	0xee, 0x10, 0x0e, 0x4a, 0x07, 0x03, 0x29, 0x2d, 0x39, 0x57, 0xb8, 0x0e, 0xaa, 0xb4, 0xe6, 0x08,
	0xb1, 0x4e, 0xc1, 0x4b, 0xb8, 0xaf, 0x96, 0xa6, 0xc9, 0xb1, 0x2f, 0xd6, 0xb9, 0xe7, 0x95, 0x9e,
	0x6f, 0xe9, 0xbf, 0xb7, 0x02, 0x17, 0x55, 0x1a, 0xfd, 0xdf, 0xbb, 0x70, 0x58, 0xa2, 0x3f, 0x15,
	0xf1, 0xc2, 0x11, 0xec, 0x0b, 0x9a, 0x2a, 0xc7, 0x64, 0xe7, 0x91, 0xc1, 0x93, 0x8a, 0x22, 0xcb,
	0x34, 0x05, 0x4f, 0x2a, 0x8e, 0xcf, 0x7c, 0x12, 0x05, 0xb9, 0x6b, 0xa3, 0x1d, 0x85, 0x0d, 0xfc,
	0x0a, 0x9d, 0xd5, 0x9b, 0x3e, 0x27, 0x3e, 0x4b, 0xa2, 0x34, 0x25, 0x3d, 0xfd, 0x3f, 0xfa, 0x5f,
	0x00, 0x57, 0xf5, 0xeb, 0x39, 0xaf, 0xf9, 0xa6, 0x61, 0x03, 0x2d, 0x1c, 0x6d, 0x04, 0x1d, 0x5f,
	0x57, 0xd0, 0x6b, 0x8d, 0x43, 0xbd, 0x96, 0xde, 0x41, 0xfb, 0x9c, 0x16, 0x81, 0xc5, 0x2d, 0xa1,
	0x09, 0xb6, 0x8d, 0x41, 0xd8, 0xc0, 0x1f, 0x70, 0xfc, 0x97, 0xf4, 0xe3, 0x9b, 0x2a, 0xd5, 0xfa,
	0x93, 0x52, 0xaf, 0x93, 0x4b, 0xd8, 0x1f, 0x52, 0xaa, 0x66, 0x64, 0x3f, 0x90, 0x73, 0xd1, 0x94,
	0x30, 0xdc, 0x62, 0xb8, 0xc0, 0xd4, 0x93, 0xbe, 0x82, 0x43, 0x41, 0x6c, 0x15, 0xcd, 0xa8, 0xe0,
	0x39, 0xac, 0xf9, 0xac, 0x41, 0xf7, 0xdf, 0x26, 0x4e, 0x73, 0x2d, 0x53, 0x0a, 0x1b, 0xa7, 0x27,
	0xb0, 0xf9, 0xc3, 0xfd, 0xbc, 0x57, 0xae, 0x26, 0xbb, 0x7e, 0xf5, 0xf2, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0xd4, 0x37, 0x83, 0xaf, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdentityServicesClient is the client API for IdentityServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityServicesClient interface {
	/// Registers a device key with the identity service
	/// Signature for authentication is the sign(sha256hash(devicePublicKey + identityServiceDomain))
	RegisterDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Get an authentication challenge that a device should use
	/// No Signature Required
	AuthenticateGetChallenge(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Logs a device in and receives a JWT token in return, for use in other API calls
	/// Signature for authentication is the sign(sha256hash(devicePublicKey + identityServiceDomain + challenge))
	AuthenticateDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*AuthenticationToken, error)
	/// Allows an originating node to prove to a receiving node ownership of a NodeKeyPair, and expects the same in return
	/// Requires the identity to self-attest to each attribute using its key
	EstablishIdentity(ctx context.Context, in *EstablishIdentityAuthenticatedRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Allows an originating device or node to retrieve an identity
	/// Address of domain but no descriptorReference or descriptorPath gets the Node's Identity
	GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Identity, error)
	/// Attestation of an Identity or Identity Attribute
	AttestIdentityAttribute(ctx context.Context, in *AttestIdentityAttributeAuthenticatedRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Delivers an IdentityMessage where the recipient is housed at this node
	DeliverMessage(ctx context.Context, in *IdentityMessage, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Retrieves any messages waiting for the authenticated device
	RetrieveMessages(ctx context.Context, in *AuthenticationToken, opts ...grpc.CallOption) (*IdentityMessageBundle, error)
}

type identityServicesClient struct {
	cc *grpc.ClientConn
}

func NewIdentityServicesClient(cc *grpc.ClientConn) IdentityServicesClient {
	return &identityServicesClient{cc}
}

func (c *identityServicesClient) RegisterDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) AuthenticateGetChallenge(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/AuthenticateGetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) AuthenticateDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*AuthenticationToken, error) {
	out := new(AuthenticationToken)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/AuthenticateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) EstablishIdentity(ctx context.Context, in *EstablishIdentityAuthenticatedRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/EstablishIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) GetIdentity(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/GetIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) AttestIdentityAttribute(ctx context.Context, in *AttestIdentityAttributeAuthenticatedRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/AttestIdentityAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) DeliverMessage(ctx context.Context, in *IdentityMessage, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/DeliverMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServicesClient) RetrieveMessages(ctx context.Context, in *AuthenticationToken, opts ...grpc.CallOption) (*IdentityMessageBundle, error) {
	out := new(IdentityMessageBundle)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.IdentityServices/RetrieveMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServicesServer is the server API for IdentityServices service.
type IdentityServicesServer interface {
	/// Registers a device key with the identity service
	/// Signature for authentication is the sign(sha256hash(devicePublicKey + identityServiceDomain))
	RegisterDevice(context.Context, *DeviceInfo) (*CommonResponse, error)
	/// Get an authentication challenge that a device should use
	/// No Signature Required
	AuthenticateGetChallenge(context.Context, *DeviceInfo) (*CommonResponse, error)
	/// Logs a device in and receives a JWT token in return, for use in other API calls
	/// Signature for authentication is the sign(sha256hash(devicePublicKey + identityServiceDomain + challenge))
	AuthenticateDevice(context.Context, *DeviceInfo) (*AuthenticationToken, error)
	/// Allows an originating node to prove to a receiving node ownership of a NodeKeyPair, and expects the same in return
	/// Requires the identity to self-attest to each attribute using its key
	EstablishIdentity(context.Context, *EstablishIdentityAuthenticatedRequest) (*CommonResponse, error)
	/// Allows an originating device or node to retrieve an identity
	/// Address of domain but no descriptorReference or descriptorPath gets the Node's Identity
	GetIdentity(context.Context, *Address) (*Identity, error)
	/// Attestation of an Identity or Identity Attribute
	AttestIdentityAttribute(context.Context, *AttestIdentityAttributeAuthenticatedRequest) (*CommonResponse, error)
	/// Delivers an IdentityMessage where the recipient is housed at this node
	DeliverMessage(context.Context, *IdentityMessage) (*CommonResponse, error)
	/// Retrieves any messages waiting for the authenticated device
	RetrieveMessages(context.Context, *AuthenticationToken) (*IdentityMessageBundle, error)
}

// UnimplementedIdentityServicesServer can be embedded to have forward compatible implementations.
type UnimplementedIdentityServicesServer struct {
}

func (*UnimplementedIdentityServicesServer) RegisterDevice(ctx context.Context, req *DeviceInfo) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (*UnimplementedIdentityServicesServer) AuthenticateGetChallenge(ctx context.Context, req *DeviceInfo) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateGetChallenge not implemented")
}
func (*UnimplementedIdentityServicesServer) AuthenticateDevice(ctx context.Context, req *DeviceInfo) (*AuthenticationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateDevice not implemented")
}
func (*UnimplementedIdentityServicesServer) EstablishIdentity(ctx context.Context, req *EstablishIdentityAuthenticatedRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishIdentity not implemented")
}
func (*UnimplementedIdentityServicesServer) GetIdentity(ctx context.Context, req *Address) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (*UnimplementedIdentityServicesServer) AttestIdentityAttribute(ctx context.Context, req *AttestIdentityAttributeAuthenticatedRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestIdentityAttribute not implemented")
}
func (*UnimplementedIdentityServicesServer) DeliverMessage(ctx context.Context, req *IdentityMessage) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverMessage not implemented")
}
func (*UnimplementedIdentityServicesServer) RetrieveMessages(ctx context.Context, req *AuthenticationToken) (*IdentityMessageBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMessages not implemented")
}

func RegisterIdentityServicesServer(s *grpc.Server, srv IdentityServicesServer) {
	s.RegisterService(&_IdentityServices_serviceDesc, srv)
}

func _IdentityServices_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).RegisterDevice(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_AuthenticateGetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).AuthenticateGetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/AuthenticateGetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).AuthenticateGetChallenge(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_AuthenticateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).AuthenticateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/AuthenticateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).AuthenticateDevice(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_EstablishIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishIdentityAuthenticatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).EstablishIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/EstablishIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).EstablishIdentity(ctx, req.(*EstablishIdentityAuthenticatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).GetIdentity(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_AttestIdentityAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestIdentityAttributeAuthenticatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).AttestIdentityAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/AttestIdentityAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).AttestIdentityAttribute(ctx, req.(*AttestIdentityAttributeAuthenticatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_DeliverMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).DeliverMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/DeliverMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).DeliverMessage(ctx, req.(*IdentityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServices_RetrieveMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServicesServer).RetrieveMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.IdentityServices/RetrieveMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServicesServer).RetrieveMessages(ctx, req.(*AuthenticationToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datumchi.protocol.IdentityServices",
	HandlerType: (*IdentityServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _IdentityServices_RegisterDevice_Handler,
		},
		{
			MethodName: "AuthenticateGetChallenge",
			Handler:    _IdentityServices_AuthenticateGetChallenge_Handler,
		},
		{
			MethodName: "AuthenticateDevice",
			Handler:    _IdentityServices_AuthenticateDevice_Handler,
		},
		{
			MethodName: "EstablishIdentity",
			Handler:    _IdentityServices_EstablishIdentity_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _IdentityServices_GetIdentity_Handler,
		},
		{
			MethodName: "AttestIdentityAttribute",
			Handler:    _IdentityServices_AttestIdentityAttribute_Handler,
		},
		{
			MethodName: "DeliverMessage",
			Handler:    _IdentityServices_DeliverMessage_Handler,
		},
		{
			MethodName: "RetrieveMessages",
			Handler:    _IdentityServices_RetrieveMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_services.proto",
}
