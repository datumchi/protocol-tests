// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ordering_services.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ordering_services.proto", fileDescriptor_42bff693f103c28c) }

var fileDescriptor_42bff693f103c28c = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x2f, 0x4a, 0x49,
	0x2d, 0xca, 0xcc, 0x4b, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4c, 0x49, 0x2c, 0x29, 0xcd, 0x4d, 0xce, 0xc8, 0x84, 0xf0, 0x93,
	0xf3, 0x73, 0xa4, 0x24, 0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0xe2, 0x53, 0xf2, 0x73, 0x13, 0x33,
	0xf3, 0xe2, 0x73, 0xf3, 0x53, 0x52, 0x73, 0x20, 0xb2, 0x46, 0x07, 0x99, 0xb8, 0x04, 0xfc, 0xa1,
	0x26, 0x05, 0x43, 0x0d, 0x12, 0x8a, 0xe1, 0x12, 0x76, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x75, 0xce,
	0xcf, 0xc9, 0x49, 0x4c, 0xca, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x13, 0x52, 0xd0, 0xc3, 0x30,
	0x5a, 0x0f, 0x45, 0x85, 0x94, 0x22, 0x56, 0x15, 0x20, 0xbb, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x95, 0x18, 0x84, 0x62, 0xb9, 0x44, 0x5c, 0x52, 0x73, 0x32, 0xcb, 0x52, 0x8b, 0x68,
	0x62, 0x7c, 0x01, 0x97, 0x18, 0xd8, 0x43, 0xce, 0x19, 0x89, 0x79, 0xe9, 0xa9, 0x9e, 0x79, 0xc5,
	0x25, 0x45, 0xa5, 0xc9, 0x60, 0x0b, 0x0c, 0x09, 0x59, 0x80, 0xa1, 0x85, 0x28, 0x1b, 0x9d, 0xa4,
	0xb8, 0xf8, 0xd2, 0x12, 0x33, 0x8b, 0x2a, 0xe0, 0x4a, 0xa2, 0x38, 0x60, 0xac, 0x24, 0x36, 0x30,
	0xcb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xf9, 0x6d, 0xe7, 0xaf, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderingServicesClient is the client API for OrderingServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderingServicesClient interface {
	/// Called to get the signature of the ordering service
	CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error)
	DeliverCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Called to
	OrderChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error)
}

type orderingServicesClient struct {
	cc *grpc.ClientConn
}

func NewOrderingServicesClient(cc *grpc.ClientConn) OrderingServicesClient {
	return &orderingServicesClient{cc}
}

func (c *orderingServicesClient) CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.OrderingServices/CreateCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingServicesClient) DeliverCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.OrderingServices/DeliverCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingServicesClient) OrderChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.OrderingServices/OrderChangeInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderingServicesServer is the server API for OrderingServices service.
type OrderingServicesServer interface {
	/// Called to get the signature of the ordering service
	CreateCollaboration(context.Context, *Collaboration) (*CommonResponse, error)
	DeliverCollaboration(context.Context, *Collaboration) (*CommonResponse, error)
	/// Called to
	OrderChangeInstruction(context.Context, *CollaborationChangeInstruction) (*CommonResponse, error)
}

// UnimplementedOrderingServicesServer can be embedded to have forward compatible implementations.
type UnimplementedOrderingServicesServer struct {
}

func (*UnimplementedOrderingServicesServer) CreateCollaboration(ctx context.Context, req *Collaboration) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollaboration not implemented")
}
func (*UnimplementedOrderingServicesServer) DeliverCollaboration(ctx context.Context, req *Collaboration) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverCollaboration not implemented")
}
func (*UnimplementedOrderingServicesServer) OrderChangeInstruction(ctx context.Context, req *CollaborationChangeInstruction) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderChangeInstruction not implemented")
}

func RegisterOrderingServicesServer(s *grpc.Server, srv OrderingServicesServer) {
	s.RegisterService(&_OrderingServices_serviceDesc, srv)
}

func _OrderingServices_CreateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServicesServer).CreateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.OrderingServices/CreateCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServicesServer).CreateCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderingServices_DeliverCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServicesServer).DeliverCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.OrderingServices/DeliverCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServicesServer).DeliverCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderingServices_OrderChangeInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationChangeInstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServicesServer).OrderChangeInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.OrderingServices/OrderChangeInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServicesServer).OrderChangeInstruction(ctx, req.(*CollaborationChangeInstruction))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderingServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datumchi.protocol.OrderingServices",
	HandlerType: (*OrderingServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollaboration",
			Handler:    _OrderingServices_CreateCollaboration_Handler,
		},
		{
			MethodName: "DeliverCollaboration",
			Handler:    _OrderingServices_DeliverCollaboration_Handler,
		},
		{
			MethodName: "OrderChangeInstruction",
			Handler:    _OrderingServices_OrderChangeInstruction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordering_services.proto",
}
