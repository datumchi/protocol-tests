// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collaboration_services.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("collaboration_services.proto", fileDescriptor_2751392daf9801e6) }

var fileDescriptor_2751392daf9801e6 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xce, 0xcf, 0xc9,
	0x49, 0x4c, 0xca, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4c, 0x49, 0x2c, 0x29, 0xcd, 0x4d,
	0xce, 0xc8, 0x84, 0xf0, 0x93, 0xf3, 0x73, 0xa4, 0x24, 0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0xe2,
	0x53, 0xf2, 0x73, 0x13, 0x33, 0xf3, 0xe2, 0x73, 0xf3, 0x53, 0x52, 0x73, 0x20, 0xb2, 0x46, 0x67,
	0x59, 0xb8, 0x44, 0x9d, 0x91, 0x8d, 0x0b, 0x86, 0x9a, 0x26, 0x14, 0xc3, 0x25, 0xec, 0x5c, 0x94,
	0x9a, 0x58, 0x92, 0x8a, 0x22, 0x2d, 0xa4, 0xa0, 0x87, 0x61, 0xbe, 0x1e, 0x8a, 0x0a, 0x29, 0x45,
	0xac, 0x2a, 0x40, 0x0e, 0x08, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0x62, 0x10, 0x8a,
	0xe5, 0x12, 0x71, 0x49, 0xcd, 0xc9, 0x2c, 0x4b, 0x2d, 0xa2, 0x89, 0xf1, 0xf5, 0x5c, 0xaa, 0x01,
	0x45, 0xf9, 0x05, 0xf9, 0xc5, 0xa8, 0xae, 0x77, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0xf5, 0xcc, 0x2b,
	0x2e, 0x29, 0x2a, 0x4d, 0x06, 0xdb, 0x67, 0x48, 0xc8, 0x3e, 0x0c, 0x2d, 0xc4, 0x39, 0xa0, 0x8e,
	0x4b, 0xc5, 0x31, 0x39, 0x39, 0xb5, 0xa0, 0x64, 0x80, 0xec, 0x2f, 0xe3, 0x52, 0x00, 0x89, 0x65,
	0x96, 0xf8, 0x17, 0xa5, 0xa4, 0x16, 0x65, 0xe6, 0xa5, 0x43, 0xe3, 0x15, 0xd9, 0x6e, 0x5d, 0x2c,
	0x06, 0xe1, 0x56, 0x4e, 0x94, 0xbd, 0x4e, 0xb2, 0x5c, 0x98, 0xe9, 0x2f, 0x8a, 0x03, 0xc6, 0x4a,
	0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x2b, 0x35, 0xc2, 0xc3, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollaborationServicesClient is the client API for CollaborationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollaborationServicesClient interface {
	/// Creates a collaboration, originating from this node
	/// Devices will call a collaboration service's CreateCollaboration service RPC, which will fan out the call to the other nodes listed as participants.
	CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Delivers a collaboration to a node with all signatures and initial Data States signed and accepted by all participants.
	DeliverCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Proposes a data change to a collaboration
	ProposeCollaborationChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Accepts a data change to a collaboration
	AcceptCollaborationChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error)
	/// Commits an ordering message to the collaboration
	CommitOrderingServiceInstruction(ctx context.Context, in *OrderingServiceInstruction, opts ...grpc.CallOption) (*CommonResponse, error)
}

type collaborationServicesClient struct {
	cc *grpc.ClientConn
}

func NewCollaborationServicesClient(cc *grpc.ClientConn) CollaborationServicesClient {
	return &collaborationServicesClient{cc}
}

func (c *collaborationServicesClient) CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.CollaborationServices/CreateCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServicesClient) DeliverCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.CollaborationServices/DeliverCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServicesClient) ProposeCollaborationChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.CollaborationServices/ProposeCollaborationChangeInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServicesClient) AcceptCollaborationChangeInstruction(ctx context.Context, in *CollaborationChangeInstruction, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.CollaborationServices/AcceptCollaborationChangeInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServicesClient) CommitOrderingServiceInstruction(ctx context.Context, in *OrderingServiceInstruction, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/datumchi.protocol.CollaborationServices/CommitOrderingServiceInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServicesServer is the server API for CollaborationServices service.
type CollaborationServicesServer interface {
	/// Creates a collaboration, originating from this node
	/// Devices will call a collaboration service's CreateCollaboration service RPC, which will fan out the call to the other nodes listed as participants.
	CreateCollaboration(context.Context, *Collaboration) (*CommonResponse, error)
	/// Delivers a collaboration to a node with all signatures and initial Data States signed and accepted by all participants.
	DeliverCollaboration(context.Context, *Collaboration) (*CommonResponse, error)
	/// Proposes a data change to a collaboration
	ProposeCollaborationChangeInstruction(context.Context, *CollaborationChangeInstruction) (*CommonResponse, error)
	/// Accepts a data change to a collaboration
	AcceptCollaborationChangeInstruction(context.Context, *CollaborationChangeInstruction) (*CommonResponse, error)
	/// Commits an ordering message to the collaboration
	CommitOrderingServiceInstruction(context.Context, *OrderingServiceInstruction) (*CommonResponse, error)
}

// UnimplementedCollaborationServicesServer can be embedded to have forward compatible implementations.
type UnimplementedCollaborationServicesServer struct {
}

func (*UnimplementedCollaborationServicesServer) CreateCollaboration(ctx context.Context, req *Collaboration) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollaboration not implemented")
}
func (*UnimplementedCollaborationServicesServer) DeliverCollaboration(ctx context.Context, req *Collaboration) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverCollaboration not implemented")
}
func (*UnimplementedCollaborationServicesServer) ProposeCollaborationChangeInstruction(ctx context.Context, req *CollaborationChangeInstruction) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCollaborationChangeInstruction not implemented")
}
func (*UnimplementedCollaborationServicesServer) AcceptCollaborationChangeInstruction(ctx context.Context, req *CollaborationChangeInstruction) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCollaborationChangeInstruction not implemented")
}
func (*UnimplementedCollaborationServicesServer) CommitOrderingServiceInstruction(ctx context.Context, req *OrderingServiceInstruction) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOrderingServiceInstruction not implemented")
}

func RegisterCollaborationServicesServer(s *grpc.Server, srv CollaborationServicesServer) {
	s.RegisterService(&_CollaborationServices_serviceDesc, srv)
}

func _CollaborationServices_CreateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServicesServer).CreateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.CollaborationServices/CreateCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServicesServer).CreateCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationServices_DeliverCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServicesServer).DeliverCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.CollaborationServices/DeliverCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServicesServer).DeliverCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationServices_ProposeCollaborationChangeInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationChangeInstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServicesServer).ProposeCollaborationChangeInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.CollaborationServices/ProposeCollaborationChangeInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServicesServer).ProposeCollaborationChangeInstruction(ctx, req.(*CollaborationChangeInstruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationServices_AcceptCollaborationChangeInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationChangeInstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServicesServer).AcceptCollaborationChangeInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.CollaborationServices/AcceptCollaborationChangeInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServicesServer).AcceptCollaborationChangeInstruction(ctx, req.(*CollaborationChangeInstruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationServices_CommitOrderingServiceInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderingServiceInstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServicesServer).CommitOrderingServiceInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datumchi.protocol.CollaborationServices/CommitOrderingServiceInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServicesServer).CommitOrderingServiceInstruction(ctx, req.(*OrderingServiceInstruction))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollaborationServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datumchi.protocol.CollaborationServices",
	HandlerType: (*CollaborationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollaboration",
			Handler:    _CollaborationServices_CreateCollaboration_Handler,
		},
		{
			MethodName: "DeliverCollaboration",
			Handler:    _CollaborationServices_DeliverCollaboration_Handler,
		},
		{
			MethodName: "ProposeCollaborationChangeInstruction",
			Handler:    _CollaborationServices_ProposeCollaborationChangeInstruction_Handler,
		},
		{
			MethodName: "AcceptCollaborationChangeInstruction",
			Handler:    _CollaborationServices_AcceptCollaborationChangeInstruction_Handler,
		},
		{
			MethodName: "CommitOrderingServiceInstruction",
			Handler:    _CollaborationServices_CommitOrderingServiceInstruction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collaboration_services.proto",
}
